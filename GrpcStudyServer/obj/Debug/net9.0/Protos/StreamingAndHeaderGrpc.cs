// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/streamingAndHeader.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace GrpcStudyServer {
  public static partial class StreamingAndHeader
  {
    static readonly string __ServiceName = "StreamingAndHeader";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::GrpcStudyServer.ServerStreamRequest> __Marshaller_ServerStreamRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::GrpcStudyServer.ServerStreamRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::GrpcStudyServer.ServerStreamResponse> __Marshaller_ServerStreamResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::GrpcStudyServer.ServerStreamResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::GrpcStudyServer.ClientStreamRequest> __Marshaller_ClientStreamRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::GrpcStudyServer.ClientStreamRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::GrpcStudyServer.ClientStreamResponse> __Marshaller_ClientStreamResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::GrpcStudyServer.ClientStreamResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::GrpcStudyServer.HeaderRequest> __Marshaller_HeaderRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::GrpcStudyServer.HeaderRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::GrpcStudyServer.HeaderResponse> __Marshaller_HeaderResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::GrpcStudyServer.HeaderResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::GrpcStudyServer.ServerStreamRequest, global::GrpcStudyServer.ServerStreamResponse> __Method_ServerStreaming = new grpc::Method<global::GrpcStudyServer.ServerStreamRequest, global::GrpcStudyServer.ServerStreamResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "ServerStreaming",
        __Marshaller_ServerStreamRequest,
        __Marshaller_ServerStreamResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::GrpcStudyServer.ClientStreamRequest, global::GrpcStudyServer.ClientStreamResponse> __Method_ClientStreaming = new grpc::Method<global::GrpcStudyServer.ClientStreamRequest, global::GrpcStudyServer.ClientStreamResponse>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "ClientStreaming",
        __Marshaller_ClientStreamRequest,
        __Marshaller_ClientStreamResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::GrpcStudyServer.ClientStreamRequest, global::GrpcStudyServer.ServerStreamResponse> __Method_BidirectionalStreaming = new grpc::Method<global::GrpcStudyServer.ClientStreamRequest, global::GrpcStudyServer.ServerStreamResponse>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "BidirectionalStreaming",
        __Marshaller_ClientStreamRequest,
        __Marshaller_ServerStreamResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::GrpcStudyServer.HeaderRequest, global::GrpcStudyServer.HeaderResponse> __Method_Header = new grpc::Method<global::GrpcStudyServer.HeaderRequest, global::GrpcStudyServer.HeaderResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Header",
        __Marshaller_HeaderRequest,
        __Marshaller_HeaderResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::GrpcStudyServer.HeaderRequest, global::GrpcStudyServer.HeaderResponse> __Method_Trailer = new grpc::Method<global::GrpcStudyServer.HeaderRequest, global::GrpcStudyServer.HeaderResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Trailer",
        __Marshaller_HeaderRequest,
        __Marshaller_HeaderResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::GrpcStudyServer.StreamingAndHeaderReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of StreamingAndHeader</summary>
    [grpc::BindServiceMethod(typeof(StreamingAndHeader), "BindService")]
    public abstract partial class StreamingAndHeaderBase
    {
      /// <summary>
      /// 서버 -> 클라이언트 스트리밍 메서드
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task ServerStreaming(global::GrpcStudyServer.ServerStreamRequest request, grpc::IServerStreamWriter<global::GrpcStudyServer.ServerStreamResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 클라이언트 -> 서버 스트리밍 메서드
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::GrpcStudyServer.ClientStreamResponse> ClientStreaming(grpc::IAsyncStreamReader<global::GrpcStudyServer.ClientStreamRequest> requestStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 양방향 스트리밍 메서드
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task BidirectionalStreaming(grpc::IAsyncStreamReader<global::GrpcStudyServer.ClientStreamRequest> requestStream, grpc::IServerStreamWriter<global::GrpcStudyServer.ServerStreamResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 헤더를 사용하는 메서드
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::GrpcStudyServer.HeaderResponse> Header(global::GrpcStudyServer.HeaderRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 트레일러 사용하는 메서드
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::GrpcStudyServer.HeaderResponse> Trailer(global::GrpcStudyServer.HeaderRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(StreamingAndHeaderBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ServerStreaming, serviceImpl.ServerStreaming)
          .AddMethod(__Method_ClientStreaming, serviceImpl.ClientStreaming)
          .AddMethod(__Method_BidirectionalStreaming, serviceImpl.BidirectionalStreaming)
          .AddMethod(__Method_Header, serviceImpl.Header)
          .AddMethod(__Method_Trailer, serviceImpl.Trailer).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, StreamingAndHeaderBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_ServerStreaming, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::GrpcStudyServer.ServerStreamRequest, global::GrpcStudyServer.ServerStreamResponse>(serviceImpl.ServerStreaming));
      serviceBinder.AddMethod(__Method_ClientStreaming, serviceImpl == null ? null : new grpc::ClientStreamingServerMethod<global::GrpcStudyServer.ClientStreamRequest, global::GrpcStudyServer.ClientStreamResponse>(serviceImpl.ClientStreaming));
      serviceBinder.AddMethod(__Method_BidirectionalStreaming, serviceImpl == null ? null : new grpc::DuplexStreamingServerMethod<global::GrpcStudyServer.ClientStreamRequest, global::GrpcStudyServer.ServerStreamResponse>(serviceImpl.BidirectionalStreaming));
      serviceBinder.AddMethod(__Method_Header, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::GrpcStudyServer.HeaderRequest, global::GrpcStudyServer.HeaderResponse>(serviceImpl.Header));
      serviceBinder.AddMethod(__Method_Trailer, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::GrpcStudyServer.HeaderRequest, global::GrpcStudyServer.HeaderResponse>(serviceImpl.Trailer));
    }

  }
}
#endregion
