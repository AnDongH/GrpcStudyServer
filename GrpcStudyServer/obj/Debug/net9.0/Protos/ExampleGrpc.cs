// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/example.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

public static partial class ExampleService
{
  static readonly string __ServiceName = "ExampleService";

  [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
  static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
  {
    #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
    if (message is global::Google.Protobuf.IBufferMessage)
    {
      context.SetPayloadLength(message.CalculateSize());
      global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
      context.Complete();
      return;
    }
    #endif
    context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
  }

  [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
  static class __Helper_MessageCache<T>
  {
    public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
  }

  [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
  static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
  {
    #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
    if (__Helper_MessageCache<T>.IsBufferMessage)
    {
      return parser.ParseFrom(context.PayloadAsReadOnlySequence());
    }
    #endif
    return parser.ParseFrom(context.PayloadAsNewBuffer());
  }

  [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
  static readonly grpc::Marshaller<global::ExampleRequest> __Marshaller_ExampleRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ExampleRequest.Parser));
  [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
  static readonly grpc::Marshaller<global::ExampleResponse> __Marshaller_ExampleResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ExampleResponse.Parser));
  [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
  static readonly grpc::Marshaller<global::DataRequest> __Marshaller_DataRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DataRequest.Parser));
  [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
  static readonly grpc::Marshaller<global::DataResponse> __Marshaller_DataResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DataResponse.Parser));

  [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
  static readonly grpc::Method<global::ExampleRequest, global::ExampleResponse> __Method_UnaryCall = new grpc::Method<global::ExampleRequest, global::ExampleResponse>(
      grpc::MethodType.Unary,
      __ServiceName,
      "UnaryCall",
      __Marshaller_ExampleRequest,
      __Marshaller_ExampleResponse);

  [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
  static readonly grpc::Method<global::ExampleRequest, global::ExampleResponse> __Method_UnaryHeaderCall = new grpc::Method<global::ExampleRequest, global::ExampleResponse>(
      grpc::MethodType.Unary,
      __ServiceName,
      "UnaryHeaderCall",
      __Marshaller_ExampleRequest,
      __Marshaller_ExampleResponse);

  [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
  static readonly grpc::Method<global::ExampleRequest, global::ExampleResponse> __Method_StreamingFromServer = new grpc::Method<global::ExampleRequest, global::ExampleResponse>(
      grpc::MethodType.ServerStreaming,
      __ServiceName,
      "StreamingFromServer",
      __Marshaller_ExampleRequest,
      __Marshaller_ExampleResponse);

  [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
  static readonly grpc::Method<global::ExampleRequest, global::ExampleResponse> __Method_StreamingFromClient = new grpc::Method<global::ExampleRequest, global::ExampleResponse>(
      grpc::MethodType.ClientStreaming,
      __ServiceName,
      "StreamingFromClient",
      __Marshaller_ExampleRequest,
      __Marshaller_ExampleResponse);

  [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
  static readonly grpc::Method<global::ExampleRequest, global::ExampleResponse> __Method_StreamingBothWays = new grpc::Method<global::ExampleRequest, global::ExampleResponse>(
      grpc::MethodType.DuplexStreaming,
      __ServiceName,
      "StreamingBothWays",
      __Marshaller_ExampleRequest,
      __Marshaller_ExampleResponse);

  [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
  static readonly grpc::Method<global::DataRequest, global::DataResponse> __Method_DownloadResults = new grpc::Method<global::DataRequest, global::DataResponse>(
      grpc::MethodType.Unary,
      __ServiceName,
      "DownloadResults",
      __Marshaller_DataRequest,
      __Marshaller_DataResponse);

  /// <summary>Service descriptor</summary>
  public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
  {
    get { return global::ExampleReflection.Descriptor.Services[0]; }
  }

  /// <summary>Base class for server-side implementations of ExampleService</summary>
  [grpc::BindServiceMethod(typeof(ExampleService), "BindService")]
  public abstract partial class ExampleServiceBase
  {
    /// <summary>
    /// Unary
    /// </summary>
    /// <param name="request">The request received from the client.</param>
    /// <param name="context">The context of the server-side call handler being invoked.</param>
    /// <returns>The response to send back to the client (wrapped by a task).</returns>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public virtual global::System.Threading.Tasks.Task<global::ExampleResponse> UnaryCall(global::ExampleRequest request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public virtual global::System.Threading.Tasks.Task<global::ExampleResponse> UnaryHeaderCall(global::ExampleRequest request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

    /// <summary>
    /// Server streaming
    /// </summary>
    /// <param name="request">The request received from the client.</param>
    /// <param name="responseStream">Used for sending responses back to the client.</param>
    /// <param name="context">The context of the server-side call handler being invoked.</param>
    /// <returns>A task indicating completion of the handler.</returns>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public virtual global::System.Threading.Tasks.Task StreamingFromServer(global::ExampleRequest request, grpc::IServerStreamWriter<global::ExampleResponse> responseStream, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

    /// <summary>
    /// Client streaming
    /// </summary>
    /// <param name="requestStream">Used for reading requests from the client.</param>
    /// <param name="context">The context of the server-side call handler being invoked.</param>
    /// <returns>The response to send back to the client (wrapped by a task).</returns>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public virtual global::System.Threading.Tasks.Task<global::ExampleResponse> StreamingFromClient(grpc::IAsyncStreamReader<global::ExampleRequest> requestStream, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

    /// <summary>
    /// Bi-directional streaming
    /// </summary>
    /// <param name="requestStream">Used for reading requests from the client.</param>
    /// <param name="responseStream">Used for sending responses back to the client.</param>
    /// <param name="context">The context of the server-side call handler being invoked.</param>
    /// <returns>A task indicating completion of the handler.</returns>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public virtual global::System.Threading.Tasks.Task StreamingBothWays(grpc::IAsyncStreamReader<global::ExampleRequest> requestStream, grpc::IServerStreamWriter<global::ExampleResponse> responseStream, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public virtual global::System.Threading.Tasks.Task<global::DataResponse> DownloadResults(global::DataRequest request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

  }

  /// <summary>Creates service definition that can be registered with a server</summary>
  /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
  [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
  public static grpc::ServerServiceDefinition BindService(ExampleServiceBase serviceImpl)
  {
    return grpc::ServerServiceDefinition.CreateBuilder()
        .AddMethod(__Method_UnaryCall, serviceImpl.UnaryCall)
        .AddMethod(__Method_UnaryHeaderCall, serviceImpl.UnaryHeaderCall)
        .AddMethod(__Method_StreamingFromServer, serviceImpl.StreamingFromServer)
        .AddMethod(__Method_StreamingFromClient, serviceImpl.StreamingFromClient)
        .AddMethod(__Method_StreamingBothWays, serviceImpl.StreamingBothWays)
        .AddMethod(__Method_DownloadResults, serviceImpl.DownloadResults).Build();
  }

  /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
  /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
  /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
  /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
  [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
  public static void BindService(grpc::ServiceBinderBase serviceBinder, ExampleServiceBase serviceImpl)
  {
    serviceBinder.AddMethod(__Method_UnaryCall, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ExampleRequest, global::ExampleResponse>(serviceImpl.UnaryCall));
    serviceBinder.AddMethod(__Method_UnaryHeaderCall, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ExampleRequest, global::ExampleResponse>(serviceImpl.UnaryHeaderCall));
    serviceBinder.AddMethod(__Method_StreamingFromServer, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::ExampleRequest, global::ExampleResponse>(serviceImpl.StreamingFromServer));
    serviceBinder.AddMethod(__Method_StreamingFromClient, serviceImpl == null ? null : new grpc::ClientStreamingServerMethod<global::ExampleRequest, global::ExampleResponse>(serviceImpl.StreamingFromClient));
    serviceBinder.AddMethod(__Method_StreamingBothWays, serviceImpl == null ? null : new grpc::DuplexStreamingServerMethod<global::ExampleRequest, global::ExampleResponse>(serviceImpl.StreamingBothWays));
    serviceBinder.AddMethod(__Method_DownloadResults, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::DataRequest, global::DataResponse>(serviceImpl.DownloadResults));
  }

}
#endregion
