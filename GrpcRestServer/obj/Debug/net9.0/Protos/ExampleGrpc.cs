// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/example.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

public static partial class ExampleService
{
  static readonly string __ServiceName = "ExampleService";

  [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
  static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
  {
    #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
    if (message is global::Google.Protobuf.IBufferMessage)
    {
      context.SetPayloadLength(message.CalculateSize());
      global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
      context.Complete();
      return;
    }
    #endif
    context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
  }

  [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
  static class __Helper_MessageCache<T>
  {
    public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
  }

  [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
  static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
  {
    #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
    if (__Helper_MessageCache<T>.IsBufferMessage)
    {
      return parser.ParseFrom(context.PayloadAsReadOnlySequence());
    }
    #endif
    return parser.ParseFrom(context.PayloadAsNewBuffer());
  }

  [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
  static readonly grpc::Marshaller<global::ExampleRequest> __Marshaller_ExampleRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ExampleRequest.Parser));
  [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
  static readonly grpc::Marshaller<global::ExampleResponse> __Marshaller_ExampleResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ExampleResponse.Parser));
  [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
  static readonly grpc::Marshaller<global::DataRequest> __Marshaller_DataRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DataRequest.Parser));
  [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
  static readonly grpc::Marshaller<global::DataResponse> __Marshaller_DataResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DataResponse.Parser));

  [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
  static readonly grpc::Method<global::ExampleRequest, global::ExampleResponse> __Method_UnaryCall = new grpc::Method<global::ExampleRequest, global::ExampleResponse>(
      grpc::MethodType.Unary,
      __ServiceName,
      "UnaryCall",
      __Marshaller_ExampleRequest,
      __Marshaller_ExampleResponse);

  [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
  static readonly grpc::Method<global::ExampleRequest, global::ExampleResponse> __Method_UnaryHeaderCall = new grpc::Method<global::ExampleRequest, global::ExampleResponse>(
      grpc::MethodType.Unary,
      __ServiceName,
      "UnaryHeaderCall",
      __Marshaller_ExampleRequest,
      __Marshaller_ExampleResponse);

  [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
  static readonly grpc::Method<global::ExampleRequest, global::ExampleResponse> __Method_StreamingFromServer = new grpc::Method<global::ExampleRequest, global::ExampleResponse>(
      grpc::MethodType.ServerStreaming,
      __ServiceName,
      "StreamingFromServer",
      __Marshaller_ExampleRequest,
      __Marshaller_ExampleResponse);

  [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
  static readonly grpc::Method<global::ExampleRequest, global::ExampleResponse> __Method_StreamingFromClient = new grpc::Method<global::ExampleRequest, global::ExampleResponse>(
      grpc::MethodType.ClientStreaming,
      __ServiceName,
      "StreamingFromClient",
      __Marshaller_ExampleRequest,
      __Marshaller_ExampleResponse);

  [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
  static readonly grpc::Method<global::ExampleRequest, global::ExampleResponse> __Method_StreamingBothWays = new grpc::Method<global::ExampleRequest, global::ExampleResponse>(
      grpc::MethodType.DuplexStreaming,
      __ServiceName,
      "StreamingBothWays",
      __Marshaller_ExampleRequest,
      __Marshaller_ExampleResponse);

  [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
  static readonly grpc::Method<global::DataRequest, global::DataResponse> __Method_DownloadResults = new grpc::Method<global::DataRequest, global::DataResponse>(
      grpc::MethodType.Unary,
      __ServiceName,
      "DownloadResults",
      __Marshaller_DataRequest,
      __Marshaller_DataResponse);

  /// <summary>Service descriptor</summary>
  public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
  {
    get { return global::ExampleReflection.Descriptor.Services[0]; }
  }

  /// <summary>Client for ExampleService</summary>
  public partial class ExampleServiceClient : grpc::ClientBase<ExampleServiceClient>
  {
    /// <summary>Creates a new client for ExampleService</summary>
    /// <param name="channel">The channel to use to make remote calls.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public ExampleServiceClient(grpc::ChannelBase channel) : base(channel)
    {
    }
    /// <summary>Creates a new client for ExampleService that uses a custom <c>CallInvoker</c>.</summary>
    /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public ExampleServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
    {
    }
    /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    protected ExampleServiceClient() : base()
    {
    }
    /// <summary>Protected constructor to allow creation of configured clients.</summary>
    /// <param name="configuration">The client configuration.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    protected ExampleServiceClient(ClientBaseConfiguration configuration) : base(configuration)
    {
    }

    /// <summary>
    /// Unary
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
    /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
    /// <param name="cancellationToken">An optional token for canceling the call.</param>
    /// <returns>The response received from the server.</returns>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public virtual global::ExampleResponse UnaryCall(global::ExampleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return UnaryCall(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    /// <summary>
    /// Unary
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="options">The options for the call.</param>
    /// <returns>The response received from the server.</returns>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public virtual global::ExampleResponse UnaryCall(global::ExampleRequest request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_UnaryCall, null, options, request);
    }
    /// <summary>
    /// Unary
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
    /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
    /// <param name="cancellationToken">An optional token for canceling the call.</param>
    /// <returns>The call object.</returns>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public virtual grpc::AsyncUnaryCall<global::ExampleResponse> UnaryCallAsync(global::ExampleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return UnaryCallAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    /// <summary>
    /// Unary
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="options">The options for the call.</param>
    /// <returns>The call object.</returns>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public virtual grpc::AsyncUnaryCall<global::ExampleResponse> UnaryCallAsync(global::ExampleRequest request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_UnaryCall, null, options, request);
    }
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public virtual global::ExampleResponse UnaryHeaderCall(global::ExampleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return UnaryHeaderCall(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public virtual global::ExampleResponse UnaryHeaderCall(global::ExampleRequest request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_UnaryHeaderCall, null, options, request);
    }
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public virtual grpc::AsyncUnaryCall<global::ExampleResponse> UnaryHeaderCallAsync(global::ExampleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return UnaryHeaderCallAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public virtual grpc::AsyncUnaryCall<global::ExampleResponse> UnaryHeaderCallAsync(global::ExampleRequest request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_UnaryHeaderCall, null, options, request);
    }
    /// <summary>
    /// Server streaming
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
    /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
    /// <param name="cancellationToken">An optional token for canceling the call.</param>
    /// <returns>The call object.</returns>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public virtual grpc::AsyncServerStreamingCall<global::ExampleResponse> StreamingFromServer(global::ExampleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return StreamingFromServer(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    /// <summary>
    /// Server streaming
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="options">The options for the call.</param>
    /// <returns>The call object.</returns>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public virtual grpc::AsyncServerStreamingCall<global::ExampleResponse> StreamingFromServer(global::ExampleRequest request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncServerStreamingCall(__Method_StreamingFromServer, null, options, request);
    }
    /// <summary>
    /// Client streaming
    /// </summary>
    /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
    /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
    /// <param name="cancellationToken">An optional token for canceling the call.</param>
    /// <returns>The call object.</returns>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public virtual grpc::AsyncClientStreamingCall<global::ExampleRequest, global::ExampleResponse> StreamingFromClient(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return StreamingFromClient(new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    /// <summary>
    /// Client streaming
    /// </summary>
    /// <param name="options">The options for the call.</param>
    /// <returns>The call object.</returns>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public virtual grpc::AsyncClientStreamingCall<global::ExampleRequest, global::ExampleResponse> StreamingFromClient(grpc::CallOptions options)
    {
      return CallInvoker.AsyncClientStreamingCall(__Method_StreamingFromClient, null, options);
    }
    /// <summary>
    /// Bi-directional streaming
    /// </summary>
    /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
    /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
    /// <param name="cancellationToken">An optional token for canceling the call.</param>
    /// <returns>The call object.</returns>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public virtual grpc::AsyncDuplexStreamingCall<global::ExampleRequest, global::ExampleResponse> StreamingBothWays(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return StreamingBothWays(new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    /// <summary>
    /// Bi-directional streaming
    /// </summary>
    /// <param name="options">The options for the call.</param>
    /// <returns>The call object.</returns>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public virtual grpc::AsyncDuplexStreamingCall<global::ExampleRequest, global::ExampleResponse> StreamingBothWays(grpc::CallOptions options)
    {
      return CallInvoker.AsyncDuplexStreamingCall(__Method_StreamingBothWays, null, options);
    }
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public virtual global::DataResponse DownloadResults(global::DataRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return DownloadResults(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public virtual global::DataResponse DownloadResults(global::DataRequest request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_DownloadResults, null, options, request);
    }
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public virtual grpc::AsyncUnaryCall<global::DataResponse> DownloadResultsAsync(global::DataRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return DownloadResultsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public virtual grpc::AsyncUnaryCall<global::DataResponse> DownloadResultsAsync(global::DataRequest request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_DownloadResults, null, options, request);
    }
    /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    protected override ExampleServiceClient NewInstance(ClientBaseConfiguration configuration)
    {
      return new ExampleServiceClient(configuration);
    }
  }

}
#endregion
